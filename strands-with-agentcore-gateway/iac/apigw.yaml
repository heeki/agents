AWSTemplateFormatVersion: '2010-09-09'
Description: API Gateway target for AgentCore Gateway
Transform: AWS::Serverless-2016-10-31
Globals:
  Api:
    OpenApiVersion: 3.0.1
  Function:
    Layers:
      - arn:aws:lambda:us-east-1:580247275435:layer:LambdaInsightsExtension:56
    MemorySize: !Ref fnMemory
    Runtime: python3.12
    Timeout: !Ref fnTimeout
Parameters:
  apiDomainName:
    Type: String
  apiBasePath:
    Type: String
  apiStage:
    Type: String
  fnMemory:
    Type: Number
  fnTimeout:
    Type: Number
  cognitoUserPoolId:
    Type: String
Resources:
  # APIGW
  Api:
    Type: AWS::Serverless::Api
    Properties:
      AccessLogSetting:
        DestinationArn: !GetAtt ApiLogGroup.Arn
        Format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp", "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod","routeKey":"$context.routeKey", "status":"$context.status","protocol":"$context.protocol", "responseLength":"$context.responseLength", "auth.status":"$context.authorizer.status", "auth.error":"$context.authorizer.error", "auth.token":"$context.authorizer.token", "auth.reason":"$context.authorizer.reason", "auth.simple":"$context.authorizer.simple", "auth.pversion":"$context.authorizer.pversion" }'
      StageName: !Ref apiStage
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: ./openapi.yaml
      EndpointConfiguration:
        Type: REGIONAL
  ApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/apigateway/apigw-agentcore-gateway-${Api}"
      RetentionInDays: 7
  ApiMapping:
    DependsOn: Api
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      RestApiId: !Ref Api
      BasePath: !Ref apiBasePath
      DomainName: !Ref apiDomainName
      Stage: !Ref apiStage
    DependsOn:
      - ApiStage
  # Lambda
  FnRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: cloudwatch-insights
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                Resource: '*'
        - PolicyName: cloudwatch-logs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource: 'arn:aws:logs:*:*:log-group:*:*'
  FnApi:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../src/api-gateway
      Handler: fn.handler
      Role: !GetAtt FnRole.Arn
      Tags:
        application:group: agentcore
        application:subgroup: apigw
        application:owner: heeki
  FnApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${FnApi}'
      RetentionInDays: 7
  FnApiPerm:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt FnApi.Arn
      Principal: apigateway.amazonaws.com
      Action: lambda:InvokeFunction
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/*/*/*'
  FnAgentCore:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../src/agentcore-gateway
      Handler: fn.handler
      Role: !GetAtt FnRole.Arn
      Tags:
        application:group: agentcore
        application:subgroup: apigw
        application:owner: heeki
  FnAgentCoreLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${FnAgentCore}'
      RetentionInDays: 7
  FnAgentCorePerm:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt FnAgentCore.Arn
      Principal: bedrock-agentcore.amazonaws.com
      Action: lambda:InvokeFunction
Outputs:
  outApi:
    Value: !Ref Api
  outApiEndpoint:
    Value: !Sub 'https://${Api}.execute-api.${AWS::Region}.amazonaws.com/${apiStage}'
  outFnApi:
    Value: !Ref FnApi
  outFnAgentCore:
    Value: !Ref FnAgentCore

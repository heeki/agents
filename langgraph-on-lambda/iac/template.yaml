AWSTemplateFormatVersion: '2010-09-09'
Description: Langgraph deployment on API Gateway and Lambda
Transform: AWS::Serverless-2016-10-31
Globals:
  Api:
    OpenApiVersion: 3.0.1
  Function:
    Layers:
      - arn:aws:lambda:us-east-1:580247275435:layer:LambdaInsightsExtension:60
    MemorySize: !Ref fnMemory
    Runtime: nodejs22.x
    Timeout: !Ref fnTimeout
Parameters:
  apiStage:
    Type: String
  fnMemory:
    Type: Number
  fnTimeout:
    Type: Number
Resources:
  # APIGW
  Api:
    Type: AWS::Serverless::Api
    Properties:
      AccessLogSetting:
        DestinationArn: !GetAtt ApiLogGroup.Arn
        Format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp", "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod","routeKey":"$context.routeKey", "status":"$context.status","protocol":"$context.protocol", "responseLength":"$context.responseLength", "auth.status":"$context.authorizer.status", "auth.error":"$context.authorizer.error", "auth.token":"$context.authorizer.token", "auth.reason":"$context.authorizer.reason", "auth.simple":"$context.authorizer.simple", "auth.pversion":"$context.authorizer.pversion" }'
      StageName: !Ref apiStage
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: openapi.yaml
      EndpointConfiguration:
        Type: REGIONAL
  ApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/apigateway/langgraph-on-lambda-${Api}"
      RetentionInDays: 7
  # Lambda
  FnRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: cloudwatch-insights
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                Resource: '*'
        - PolicyName: cloudwatch-logs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource: 'arn:aws:logs:*:*:log-group:*:*'
        - PolicyName: xray
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                  - xray:GetSamplingRules
                  - xray:GetSamplingTargets
                  - xray:GetSamplingStatisticSummaries
                Resource: '*'
        - PolicyName: bedrock
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                Resource:
                  - !Sub 'arn:aws:bedrock:us-east-1::foundation-model/anthropic.claude-sonnet-4-20250514-v1:0'
                  - !Sub 'arn:aws:bedrock:us-east-2::foundation-model/anthropic.claude-sonnet-4-20250514-v1:0'
                  - !Sub 'arn:aws:bedrock:us-west-2::foundation-model/anthropic.claude-sonnet-4-20250514-v1:0'
                  - !Sub 'arn:aws:bedrock:us-east-1:${AWS::AccountId}:inference-profile/us.anthropic.claude-sonnet-4-20250514-v1:0'
                  - !Sub 'arn:aws:bedrock:us-east-2:${AWS::AccountId}:inference-profile/us.anthropic.claude-sonnet-4-20250514-v1:0'
                  - !Sub 'arn:aws:bedrock:us-west-2:${AWS::AccountId}:inference-profile/us.anthropic.claude-sonnet-4-20250514-v1:0'
  FnBuffered:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../src/buffered
      Handler: fn.handler
      Role: !GetAtt FnRole.Arn
      Tags:
        application:group: langgraph-on-lambda
        application:subgroup: lambda
        application:owner: heeki
  FnLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${FnBuffered}'
      RetentionInDays: 7
  FnPerm:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt FnBuffered.Arn
      Principal: apigateway.amazonaws.com
      Action: lambda:InvokeFunction
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/*/*/*'
  FnStreaming:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../src/streaming
      Handler: fn.handler
      Role: !GetAtt FnRole.Arn
      Tags:
        application:group: langgraph-on-lambda
        application:subgroup: lambda
        application:owner: heeki
  FnStreamingLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${FnStreaming}'
      RetentionInDays: 7
  FnStreamingPerm:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt FnStreaming.Arn
      Principal: apigateway.amazonaws.com
      Action: lambda:InvokeFunction
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/*/*/*'
Outputs:
  outApi:
    Value: !Ref Api
  outApiEndpoint:
    Value: !Sub 'https://${Api}.execute-api.${AWS::Region}.amazonaws.com/${apiStage}'
  outFnBuffered:
    Value: !Ref FnBuffered
  outFnStreaming:
    Value: !Ref FnStreaming
